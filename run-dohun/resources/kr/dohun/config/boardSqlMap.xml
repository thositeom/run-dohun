<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">
<sqlMap namespace="boardSqlMap">
	<typeAlias alias="board" type="kr.dohun.board.BoardVO" />
	
	<resultMap id="boardMap" class="board">
		<result property="boardIdx" column="BOARD_IDX" />
		<result property="boardId" column="BOARD_ID" />
		<result property="userIdx" column="MEMBER_IDX" />
		<result property="userName" column="MEMBER_NAME" />
		<result property="boardParentIdx" column="PARENT_IDX" />
		<result property="boardType" column="BOARD_TYPE" />
		<result property="boardTitle" column="TITLE" />
		<result property="boardContent" column="CONTENT" />
		<result property="boardNotice" column="NOTICE" />
		<result property="boardSecret" column="SECRET" />
		<result property="boardCreateDate" column="CREATEDATE" />
		<result property="boardCreateUser" column="CRATEUSER" />
		<result property="boardUpdateDate" column="UPDATEDATE" />
		<result property="boardUpdateUser" column="UPDATEUSER" />
		<result property="boardBest" column="BEST" />
		<result property="boardWost" column="WOST" />
		<result property="boardCategory01" column="CATEGORY01" />
		<result property="boardCategory02" column="CATEGORY02" />
		<result property="boardCategory03" column="CATEGORY03" />
		<result property="boardCount" column="BOARD_CNT" />
		<result property="boardAnswerCnt" column="ANSWER_CNT" />
	</resultMap>
	
	<resultMap id="boardFileMap" class="board">
		<result property="boardIdx" column="BOARD_IDX" />
		<result property="fileIdx" column="FILE_IDX" />
		<result property="fileName" column="FILE_NAME" />
		<result property="fileOrigName" column="FILE_ORIG_NAME" />
		<result property="filePath" column="FILE_PATH" />
		<result property="fileSize" column="FILE_SIZE" />
		<result property="fileExtention" column="FILE_EXTENTION" />
	</resultMap>

	<!-- 게시판 목록 -->
	<select id="boardList" parameterClass="board" resultMap="boardMap">
		SELECT *
		  FROM (SELECT *
		          FROM (SELECT @ROWNUM := @ROWNUM + 1 AS NO, A.*
		                  FROM (SELECT *
		                          FROM BOARD ORDER BY BOARD_IDX DESC) A,
		                       (SELECT @ROWNUM := 0) B) C
		         WHERE C.NO <![CDATA[<=]]> #endRow#) X
		 WHERE X.NO <![CDATA[>=]]> #startRow#
	</select>
	
	<!-- 게시판 목록Count -->
	<select id="boardListCnt" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(*) FROM BOARD
	</select>

	<!-- 게시판 등록 -->
	<insert id="boardInsertInfo" parameterClass="board">
		INSERT INTO BOARD
		(BOARD_IDX,BOARD_ID,MEMBER_IDX,MEMBER_NAME,PARENT_IDX
		,BOARD_TYPE,TITLE,CONTENT,NOTICE,SECRET
		,CREATEDATE,CRATEUSER,UPDATEDATE,UPDATEUSER,CATEGORY01
		,CATEGORY02,CATEGORY03
		) 
		VALUES 
		(#boardIdx#,#boardId#,#userIdx#,#userName#,#boardParentIdx#
		,#boardType#,#boardTitle#,#boardContent#,#boardNotice#,#boardSecret#
		,NOW(),#boardCreateUser#,NOW(),#boardUpdateUser#,#boardCategory01#
		,#boardCategory02#,#boardCategory03#
		)
	</insert>	
	
	<!-- 게시판 삭제 -->
	<delete id="boardDeleteInfo" parameterClass="map">
		DELETE FROM BOARD WHERE BOARD_IDX IN 
	   <iterate property="boardCheck" open="(" conjunction="," close=")">
	   		#boardCheck[]#
       </iterate>
	</delete>
	
	<!-- 게시판 상세보기 -->
	<select id="boardDetailInfo" parameterClass="board" resultMap="boardMap">
		SELECT BOARD_IDX,BOARD_ID,MEMBER_IDX,MEMBER_NAME,PARENT_IDX
			,BOARD_TYPE,TITLE,CONVERT(CONTENT USING utf8) AS CONTENT,NOTICE,SECRET
			,CREATEDATE,CRATEUSER,UPDATEDATE,UPDATEUSER,BEST
			,WOST,CATEGORY01,CATEGORY02,CATEGORY03,BOARD_CNT
			,ANSWER_CNT 
		FROM BOARD WHERE BOARD_IDX = #boardIdx#
	</select>
	
	<!-- 게시판 뷰카운트 증가 -->
	<update id="boardViewCount" parameterClass="board">
		UPDATE BOARD
		SET BOARD_CNT = (SELECT VIEW.* 
							FROM (SELECT BOARD_CNT+1 AS VIEW_CNT FROM BOARD WHERE BOARD_IDX = #boardIdx#) VIEW
		                 ) 
		WHERE BOARD_IDX = #boardIdx#
	</update>
	
	<!-- 게시판 수정 -->
	<update id="boardUpdateInfo" parameterClass="board">
		UPDATE BOARD SET 
		TITLE=#boardTitle#, CONTENT=#boardContent#, NOTICE=#boardNotice#
		, SECRET=#boardSecret#, UPDATEDATE=NOW(),UPDATEUSER=#boardUpdateUser#
		, CATEGORY01=#boardCategory01#, CATEGORY02=#boardCategory02#, CATEGORY03=#boardCategory03#
		WHERE BOARD_IDX = #boardIdx# 
	</update>	
	
	<!-- 게시판 파일등록 -->
	<insert id="boardInsertFile" parameterClass="board">
		INSERT INTO BOARD_FILE
		(BOARD_IDX,FILE_IDX,FILE_NAME,FILE_ORIG_NAME,FILE_PATH,FILE_SIZE
		,FILE_EXTENTION,CREATEDATE,UPDATEDATE
		) 
		VALUES 
		(#boardIdx#,#fileIdx#,#fileName#,#fileOrigName#,#filePath#,#fileSize#
		,#fileExtention#,NOW(),NOW())
	</insert>	

	<!-- 게시판 파일목록 가져오기 -->
	<select id="boardFileList" parameterClass="board" resultMap="boardFileMap">
		SELECT BOARD_IDX,FILE_IDX,FILE_NAME,FILE_ORIG_NAME,FILE_PATH
			,FILE_SIZE,FILE_EXTENTION,CREATEDATE,UPDATEDATE
		FROM BOARD_FILE WHERE BOARD_IDX = #boardIdx#
	</select>
	
	<!-- 파일정보 가져오기 -->
	<select id="boardFileInfo" parameterClass="board" resultMap="boardFileMap">
		SELECT BOARD_IDX,FILE_IDX,FILE_NAME,FILE_ORIG_NAME,FILE_PATH
			,FILE_SIZE,FILE_EXTENTION,CREATEDATE,UPDATEDATE
		FROM BOARD_FILE WHERE BOARD_IDX = #boardIdx# AND FILE_IDX = #fileIdx# 
	</select>
	
	<!-- 추천여부 중복체크 -->
	<select id="boardRecommendedDuple" parameterClass="board" resultClass="java.lang.Integer">
		SELECT COUNT(*) FROM BOARD_RECOMMENDED 
		WHERE BOARD_IDX = #boardIdx# AND MEMBER_IDX = #userIdx#
	</select>
	
	<!-- 추천여부 등록 -->
	<insert id="boardRecommendedInsert" parameterClass="board" >
		INSERT INTO BOARD_RECOMMENDED(
		   RECOMMENDED_IDX,RECOMMENDED_TYPE,BOARD_ID,BOARD_IDX,MEMBER_IDX,CREATEDATE
		) VALUES (
		   #boardRecommendedIdx#,#boardRecommendedType#,#boardId#,#boardIdx#,#userIdx#,NOW()
		)
	</insert>
	
	<!-- 게시판 추천여부 카운트 증가 -->
	<update id="boardRecommendedCountUp" parameterClass="board">
		UPDATE BOARD
		SET	<isEqual property="boardRecommendedType" compareValue="B" >
				BEST
			</isEqual>
			<isEqual property="boardRecommendedType" compareValue="W" >
				WOST
			</isEqual>
			  = (SELECT VIEW.* 
							FROM (	<isEqual property="boardRecommendedType" compareValue="B" >
										SELECT BEST+1 AS BEST_CNT
									</isEqual>
									<isEqual property="boardRecommendedType" compareValue="W" >
										SELECT WOST+1 AS WOST_CNT
									</isEqual>
									FROM BOARD 
									WHERE BOARD_IDX = #boardIdx#) VIEW
		                 ) 
		WHERE BOARD_IDX = #boardIdx#
	</update>
	
<!-- 	<update id="boardUpdateSeq" parameterClass="java.lang.String" > -->
<!-- 		UPDATE  -->
<!-- 			SEQ_MANAGER a, (SELECT MAX(SEQ) AS SEQ FROM SEQ_MANAGER WHERE SEQ_ID = #seqId#) B -->
<!-- 		SET  -->
<!-- 			A.SEQ = B.SEQ+1 -->
<!-- 		WHERE SEQ_ID = #seqId# -->
<!-- 	</update>	 -->
	
	
<!-- 	<select id="honeyListCnt" parameterClass="java.lang.String" resultClass="java.lang.Integer">
		SELECT COUNT(*) FROM HONEY WHERE H_USERID = #honeyUserId#
	</select>
	
	<select id="honeyInfo" parameterClass="honey" resultMap="honeyMap">
		SELECT * FROM HONEY WHERE H_ID = #honeyId#
	</select>

	<insert id="honeyInsertInfo" parameterClass="honey">
		INSERT INTO HONEY 
		(H_ID,H_USERID,H_ORDERDATE,H_PAYMENT,H_ORDERLIST,H_QTY
		,H_COST,H_AMOUNT,H_WAYBILL,H_DELIVERYDATE,H_ETC01) 
		VALUES 
		(#honeyId#,#honeyUserId#,#honeyOrderDate#,#honeyPayment#,#honeyOrderList#,#honeyQty#
		,#honeyCost#,#honeyAmount#,#honeyWaybill#,#honeyDeliveryDate#,#honeyEtc01#)
	</insert>

	<update id="honeyUpdateInfo" parameterClass="honey">
		UPDATE HONEY SET 
			H_PAYMENT=#honeyPayment#,
			H_ORDERDATE=#honeyOrderDate#,
			H_ORDERLIST=#honeyOrderList#,
			H_QTY=#honeyQty#,
			H_COST=#honeyCost#,
			H_AMOUNT=#honeyAmount#,
			H_WAYBILL=#honeyWaybill#,
			H_DELIVERYDATE=#honeyDeliveryDate#,
			H_ETC01=#honeyEtc01#
		WHERE H_ID=#honeyId# 
	</update>	
 
	<delete id="honeyDeleteInfo" parameterClass="honey">
		DELETE FROM HONEY WHERE H_ID = #honeyId#
	</delete>
  -->
</sqlMap>